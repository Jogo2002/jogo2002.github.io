[
  {
    "objectID": "PermutationTest.html",
    "href": "PermutationTest.html",
    "title": "Project 3: Is Silver More Volatile Than Gold (August–October)?",
    "section": "",
    "text": "In this project, I investigate whether silver is more volatile than gold over recent months.\nGold and silver are both precious metals often used as investment hedges against inflation and market risk, but their price behaviors differ: gold functions more as a monetary store of value, while silver also has heavy industrial demand.\nDetermining which metal trades at a “volatility premium” — that is, which has a higher expected volatility — is important to assess the stable liquidity of gold vs. silver. This is especially useful when evaluating which metal serves as a more effective portfolio hedge under uncertainty.\nUsing daily price data from Yahoo Finance (tickers GC=F for gold and SI=F for silver), I compute daily log returns and perform a one-tailed permutation test under the null hypothesis that the two metals have equal volatility.\nBecause financial returns are often non-normal, a permutation test is a robust, simulation-based way to test this difference without assuming normality."
  },
  {
    "objectID": "PermutationTest.html#introduction",
    "href": "PermutationTest.html#introduction",
    "title": "Project 3: Is Silver More Volatile Than Gold (August–October)?",
    "section": "",
    "text": "In this project, I investigate whether silver is more volatile than gold over recent months.\nGold and silver are both precious metals often used as investment hedges against inflation and market risk, but their price behaviors differ: gold functions more as a monetary store of value, while silver also has heavy industrial demand.\nDetermining which metal trades at a “volatility premium” — that is, which has a higher expected volatility — is important to assess the stable liquidity of gold vs. silver. This is especially useful when evaluating which metal serves as a more effective portfolio hedge under uncertainty.\nUsing daily price data from Yahoo Finance (tickers GC=F for gold and SI=F for silver), I compute daily log returns and perform a one-tailed permutation test under the null hypothesis that the two metals have equal volatility.\nBecause financial returns are often non-normal, a permutation test is a robust, simulation-based way to test this difference without assuming normality."
  },
  {
    "objectID": "PermutationTest.html#load-packages-and-import-data",
    "href": "PermutationTest.html#load-packages-and-import-data",
    "title": "Project 3: Are Gold and Silver Equally Volatile?",
    "section": "Load packages and import data",
    "text": "Load packages and import data\n\n\nCode\nlibrary(quantmod)\nlibrary(tidyverse)\nlibrary(infer)\nlibrary(purrr)\n\n# Download daily gold and silver futures prices\ngetSymbols(\"GC=F\", src = \"yahoo\", from = \"2020-01-01\", to = Sys.Date())\n\n\n[1] \"GC=F\"\n\n\nCode\ngetSymbols(\"SI=F\", src = \"yahoo\", from = \"2020-01-01\", to = Sys.Date())\n\n\n[1] \"SI=F\"\n\n\nCode\n# Compute log returns (first!)\ngold_ret &lt;- dailyReturn(Cl(`GC=F`), type = \"log\")\nsilver_ret &lt;- dailyReturn(Cl(`SI=F`), type = \"log\")\n\n# Create a tibble with matching dates\nreturns &lt;- tibble(\n  date = index(gold_ret),\n  Gold = as.numeric(gold_ret),\n  Silver = as.numeric(silver_ret)\n) |&gt; drop_na()\n\n# Pivot to long format\nreturns_long &lt;- returns |&gt;\n  pivot_longer(cols = c(Gold, Silver),\n               names_to = \"Metal\",\n               values_to = \"Return\")\n\n\n\n\nCode\nggplot(returns_long, aes(x = date, y = Return, color = Metal)) +\ngeom_line(alpha = 0.6) +\nlabs(\ntitle = \"Daily Log Returns for Gold and Silver (2020–Present)\",\nx = \"Date\", y = \"Daily Log Return\",\ncolor = \"Metal\"\n) +\ntheme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nCode\nsimulate_diff_sd &lt;- function(df) {\ndf |&gt;\nmutate(Metal = sample(Metal)) |&gt;\ngroup_by(Metal) |&gt;\nsummarise(sd = sd(Return)) |&gt;\nsummarise(diff_sd = diff(sd)) |&gt;\npull(diff_sd)\n}\n\n\n\n\nCode\nobs_diff &lt;- returns_long |&gt;\ngroup_by(Metal) |&gt;\nsummarise(sd = sd(Return)) |&gt;\nsummarise(diff_sd = diff(sd)) |&gt;\npull(diff_sd)\n\nobs_diff\n\n\n[1] 0.0104208\n\n\n\n\nCode\nset.seed(123)\n\n# Simulate 1000 permutations\n\nsim_diffs &lt;- map_dbl(1:1000, ~simulate_diff_sd(returns_long))\n\n# Store in a tibble for plotting\n\nsim_df &lt;- tibble(diff_sd = sim_diffs)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This site is a project for my super cool Data Science Class."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Josh Goldhaber",
    "section": "",
    "text": "I am Josh Goldhaber, a sophomore at Pitzer College majoring in Data Science at Claremont McKenna College"
  },
  {
    "objectID": "analysis.html",
    "href": "analysis.html",
    "title": "Project 2: Netflix Text Analysis",
    "section": "",
    "text": "Code\nnetflix_titles &lt;- readr::read_csv(\n  \"https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2021/2021-04-20/netflix_titles.csv\"\n)\n\n\n\n\nCode\nnetflix_titles &lt;- netflix_titles |&gt;\n  mutate(has_number = str_detect(title, \"\\\\d+\"))\n\ntable(netflix_titles$has_number)\n\n\n\nFALSE  TRUE \n 7361   426 \n\n\nCode\n#Here, we use the `str_detect()` function with the regular expression `\\\\d+` to check whether each title contains a **number** (like *13 Reasons Why* or *3%*).  \n#This tells us how common numeric titles are — a pattern that can reflect marketing or thematic choices.\n\n#The table above shows how many Netflix titles contain numbers compared to those that do not.')\n\n\n\n#2. Counting Thematic Keywords in Descriptions\nnetflix_titles &lt;- netflix_titles |&gt;\n  mutate(\n    love_mentions = str_count(description, regex(\"\\\\blove\\\\b\", ignore_case = TRUE)),\n    death_mentions = str_count(description, regex(\"\\\\bdeath\\\\b\", ignore_case = TRUE)),\n    mystery_mentions = str_count(description, regex(\"\\\\bmystery\\\\b\", ignore_case = TRUE))\n  )\n\ntheme_counts &lt;- netflix_titles |&gt;\n  summarise(\n    love = sum(love_mentions, na.rm = TRUE),\n    death = sum(death_mentions, na.rm = TRUE),\n    mystery = sum(mystery_mentions, na.rm = TRUE)\n  ) |&gt;\n  pivot_longer(cols = everything(), names_to = \"theme\", values_to = \"count\")\n\nggplot(theme_counts, aes(x = theme, y = count, fill = theme)) +\n  geom_col() +\n  labs(\n    title = \"Common Themes in Netflix Descriptions\",\n    x = \"Theme\",\n    y = \"Count of Mentions\",\n    fill = \"Theme\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nInterpretation:\nThis plot compares the frequency of the words “love,” “death,” and “mystery” across all Netflix descriptions.\nWe can see that “love” dominates, revealing that romantic themes are heavily used.\n“Death” and “mystery” occur less often, but still signal important narrative categories.\nThis visualization illustrates how simple word counting can reveal broad narrative trends.\nFinding Adjectives That Appear Before “Story” (Lookaround Example)\n\n\nCode\nstory_words &lt;- netflix_titles |&gt;\n  mutate(adj_before_story = str_extract(description, \"\\\\b\\\\w+(?= story)\")) |&gt;\n  filter(!is.na(adj_before_story)) |&gt;\n  mutate(adj_before_story = tolower(adj_before_story)) |&gt;\n  anti_join(stop_words, by = c(\"adj_before_story\" = \"word\")) |&gt;\n  count(adj_before_story, sort = TRUE)\n\nhead(story_words, 10)\n\n\n# A tibble: 10 × 2\n   adj_before_story     n\n   &lt;chr&gt;            &lt;int&gt;\n 1 true                48\n 2 love                 8\n 3 life                 5\n 4 origin               3\n 5 biblical             2\n 6 crime                2\n 7 dark                 2\n 8 fictional            2\n 9 age                  1\n10 american             1\n\n\nHere we use a regular expression with a lookahead — (?= story) — to extract the word immediately before “story” in each description.\nFor example, in a phrase like “an incredible story”, the pattern will capture “incredible.”\nInterpretation: Looking at the top 10 words preceding story, it is clear that “true” is a clear winner. After a sharp fall off, love, life and origin take places 2-4. This trend reveals that almost all of the words before ‘story’ are adjectives describing the story.\nMost Frequent Words in Descriptions (Excluding filler)\n\n\nCode\ndata(\"stop_words\")\n\ntop_words &lt;- netflix_titles |&gt;\n  unnest_tokens(word, description) |&gt;\n  anti_join(stop_words, by = \"word\") |&gt;\n  count(word, sort = TRUE) |&gt;\n  slice_head(n = 15)\n\nggplot(top_words, aes(x = reorder(word, n), y = n)) +\n  geom_col(fill = \"steelblue\") +\n  coord_flip() +\n  labs(\n    title = \"Most Frequent Words in Netflix Descriptions\",\n    x = \"Word\",\n    y = \"Frequency\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nInterpretation:\nThis bar chart shows the 15 most common non-stop words found in Netflix descriptions.\nWords like “life,” “family,” “world,” and “love” appear prominently — reinforcing the emotional and human-centered tone of Netflix’s catalog.\nThis kind of frequency analysis helps identify how streaming services position their content around universal, relatable ideas.\nSummary of Insights\nFrom these visual and textual analyses, we can draw several conclusions:\n\nTitles with numbers are relatively common.\nThe word “love” overwhelmingly dominates thematic keywords, suggesting that romantic and emotional themes are heavily emphasized.\n\nDescriptions frequently include adjectives like “true” or “untold” before “story,” reflecting Netflix’s use of authenticity and intrigue in marketing language.\n\nThe most common descriptive words — life, family, world — reveal that Netflix’s storytelling appeals to broad, shared human experiences.\n\nData Sources\n\nAccessed via TidyTuesday (R4DS project): TidyTuesday Netflix Dataset – 2021-04-20\n\nOriginal source: Kaggle – Netflix Movies and TV Shows Dataset by Shivam Bansal (CC-BY-SA 4.0 License)\nShivam Bansal last updated this source 4 years ago"
  },
  {
    "objectID": "FifaData.html",
    "href": "FifaData.html",
    "title": "Fifa Data",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nfifa &lt;- read_csv(\"data/week11_fifa_audience.csv\", show_col_types = FALSE)\n\nNew names:\n• `` -&gt; `...1`\n\nggplot(fifa, aes(x = population_share, y = tv_audience_share, color = confederation)) +\n  geom_point(alpha = 0.7, size = 3) +\n  geom_abline(slope = 1, intercept = 0, linetype = \"dashed\", color = \"red\") +\n  scale_x_log10(labels = scales::percent_format(accuracy = 0.01)) +\n  scale_y_log10(labels = scales::percent_format(accuracy = 0.01)) +\n  labs(\n    title = \"FIFA World Cup: Population Share vs. TV Audience Share (log10 scale)\",\n    x = \"Share of World Population (log scale)\",\n    y = \"Share of World Cup TV Audience (log scale)\",\n    color = \"Confederation\"\n  ) +\n  theme_minimal()\n\nWarning in scale_x_log10(labels = scales::percent_format(accuracy = 0.01)):\nlog-10 transformation introduced infinite values.\n\n\nWarning in scale_y_log10(labels = scales::percent_format(accuracy = 0.01)):\nlog-10 transformation introduced infinite values.\n\n\n\n\n\n\n\n\n\nSource:\nhttps://github.com/rfordatascience/tidytuesday/blob/cd0df1831dc506ea0a6f1295d7605142120d6dbd/data/2018/2018-06-12/week11_fifa_audience.csv#L4\nData from: FIFA"
  },
  {
    "objectID": "FastFoodCals.html",
    "href": "FastFoodCals.html",
    "title": "Fast Food",
    "section": "",
    "text": "library(tidyverse)\n\nfastfood &lt;- read_csv(\"data/fastfood_calories.csv\", show_col_types = FALSE)\n\navg_cal &lt;- fastfood %&gt;%\n  group_by(restaurant) %&gt;%\n  summarise(mean_calories = mean(calories, na.rm = TRUE),\n            n_items = n()) %&gt;%\n  arrange(desc(mean_calories))\n\navg_cal %&gt;%\n  slice_head(n = 10) %&gt;%\n  ggplot(aes(x = reorder(restaurant, mean_calories),\n             y = mean_calories)) +\n  geom_col(fill = \"tomato\") +\n  coord_flip() +\n  labs(\n    title = \"Top 10 Fast Food Chains by Average Calories per Menu Item\",\n    x = \"Restaurant\",\n    y = \"Average Calories\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\nSource: https://github.com/rfordatascience/tidytuesday/blob/cd0df1831dc506ea0a6f1295d7605142120d6dbd/data/2018/2018-09-04/fastfood_calories.csv#L4\nData From: fastfoodnutrition.com"
  },
  {
    "objectID": "PermutationTest.html#visualize-permutation-distribution",
    "href": "PermutationTest.html#visualize-permutation-distribution",
    "title": "Project 3: Is Silver More Volatile Than Gold (August–October)?",
    "section": "Visualize Permutation Distribution",
    "text": "Visualize Permutation Distribution\nThis histogram shows the null distribution of SD differences.\nThe red dashed line represents the actual observed difference.\nIf it’s far to the right, that provides evidence that silver is truly more volatile.\n\n\nCode\nggplot(sim_df, aes(x = diff_sd)) +\n  geom_histogram(bins = 30, fill = \"skyblue\", color = \"white\") +\n  geom_vline(xintercept = obs_diff, color = \"red\", linetype = \"dashed\", size = 1) +\n  labs(\n    title = \"Permutation Distribution of Difference in Volatility (Silver − Gold)\",\n    subtitle = \"Red dashed line shows the observed difference\",\n    x = \"Difference in SD under Null (permuted)\",\n    y = \"Count\"\n  ) +\n  theme_minimal()\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\nInterpretation:\nThe observed value lies far in the upper tail of the distribution — suggesting that such a large difference would be very unlikely by chance if the metals were equally volatile."
  },
  {
    "objectID": "PermutationTest.html#calculating-p-value",
    "href": "PermutationTest.html#calculating-p-value",
    "title": "Project 3: Are Gold and Silver Equally Volatile?",
    "section": "Calculating p-value",
    "text": "Calculating p-value\n\n\nCode\np_val &lt;- mean(sim_diffs &gt;= obs_diff)\ncat(\"Observed difference in SD:\", round(obs_diff, 5), \"\\n\")\n\n\nObserved difference in SD: 0.01042 \n\n\nCode\ncat(\"Approximate permutation p-value:\", round(p_val, 20), \"\\n\")\n\n\nApproximate permutation p-value: 0"
  },
  {
    "objectID": "PermutationTest.html#load-packages-and-prepare-data",
    "href": "PermutationTest.html#load-packages-and-prepare-data",
    "title": "Project 3: Is Silver More Volatile Than Gold (August–October)?",
    "section": "Load Packages and Prepare Data",
    "text": "Load Packages and Prepare Data\nWe use quantmod to pull daily futures data from Yahoo Finance and tidyverse for data wrangling. Log returns are computed using dailyReturn(..., type = \"log\") for stability and symmetry.\n\n\nCode\nlibrary(quantmod)\nlibrary(tidyverse)\nlibrary(infer)\nlibrary(purrr)\n\n# Download daily futures prices (August 2025 – Present)\ngetSymbols(\"GC=F\", src = \"yahoo\", from = \"2025-08-01\", to = Sys.Date())\n\n\n[1] \"GC=F\"\n\n\nCode\ngetSymbols(\"SI=F\", src = \"yahoo\", from = \"2025-08-01\", to = Sys.Date())\n\n\n[1] \"SI=F\"\n\n\nCode\n# Compute log returns\ngold_ret &lt;- dailyReturn(Cl(`GC=F`), type = \"log\")\nsilver_ret &lt;- dailyReturn(Cl(`SI=F`), type = \"log\")\n\n# Combine and reshape to long format\nreturns_long &lt;- tibble(\n  date = index(gold_ret),\n  Gold = as.numeric(gold_ret),\n  Silver = as.numeric(silver_ret)\n) |&gt;\n  drop_na() |&gt;\n  pivot_longer(cols = c(Gold, Silver), names_to = \"Metal\", values_to = \"Return\")"
  },
  {
    "objectID": "PermutationTest.html#plot-daily-returns",
    "href": "PermutationTest.html#plot-daily-returns",
    "title": "Project 3: Is Silver More Volatile Than Gold (August–October)?",
    "section": "Plot Daily Returns",
    "text": "Plot Daily Returns\nThis plot shows the raw time series of daily log returns for gold and silver.\nIt helps the reader visually compare volatility over time — wider fluctuations suggest higher variance.\n\n\nCode\nggplot(returns_long, aes(x = date, y = Return, color = Metal)) +\n  geom_line(alpha = 0.6) +\n  labs(\n    title = \"Daily Log Returns for Gold and Silver (August–Present)\",\n    x = \"Date\", y = \"Daily Log Return\",\n    color = \"Metal\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nAnalysis:\nWe observe that silver (in blue) exhibits more frequent and larger daily swings compared to gold.\nThis visual pattern suggests that silver may indeed have higher volatility — which we now test more formally."
  },
  {
    "objectID": "PermutationTest.html#define-permutation-function",
    "href": "PermutationTest.html#define-permutation-function",
    "title": "Project 3: Is Silver More Volatile Than Gold (August–October)?",
    "section": "Define Permutation Function",
    "text": "Define Permutation Function\nThis function performs one simulation of the null hypothesis by randomly shuffling the Metal labels.\nThis breaks the link between returns and metal type, simulating a world where there is no real difference in volatility.\n\n\nCode\n# This function simulates one permutation of the null hypothesis\nsimulate_diff_sd &lt;- function(df) {\n  df |&gt;\n    mutate(Metal = sample(Metal)) |&gt;\n    group_by(Metal) |&gt;\n    summarise(sd = sd(Return), .groups = \"drop\") |&gt;\n    summarise(diff_sd = diff(sd)) |&gt;\n    pull(diff_sd)\n}"
  },
  {
    "objectID": "PermutationTest.html#observed-difference-in-sd",
    "href": "PermutationTest.html#observed-difference-in-sd",
    "title": "Project 3: Is Silver More Volatile Than Gold (August–October)?",
    "section": "Observed Difference in SD",
    "text": "Observed Difference in SD\nWe compute the actual observed difference in standard deviations — this is our test statistic.\nA positive value means silver is more volatile than gold.\n\n\nCode\nobs_diff &lt;- returns_long |&gt;\n  group_by(Metal) |&gt;\n  summarise(sd = sd(Return), .groups = \"drop\") |&gt;\n  summarise(diff_sd = diff(sd)) |&gt;\n  pull(diff_sd)\n\nobs_diff\n\n\n[1] 0.007858926\n\n\nInterpretation:\nThis number captures how much larger silver’s return variability is, compared to gold’s.\nWe’ll compare this observed difference to the null distribution next."
  },
  {
    "objectID": "PermutationTest.html#simulate-null-distribution",
    "href": "PermutationTest.html#simulate-null-distribution",
    "title": "Project 3: Is Silver More Volatile Than Gold (August–October)?",
    "section": "Simulate Null Distribution",
    "text": "Simulate Null Distribution\nWe repeat the permutation process 1000 times using map_dbl() to create a distribution of SD differences expected under the null hypothesis (i.e., if metals were equally volatile).\n\n\nCode\nset.seed(123)  # for reproducibility\n\n# Perform 1000 permutations under the null hypothesis\nsim_diffs &lt;- map_dbl(1:1000, ~simulate_diff_sd(returns_long))\n\n# Store in tibble for plotting\nsim_df &lt;- tibble(diff_sd = sim_diffs)"
  },
  {
    "objectID": "PermutationTest.html#calculate-approximate-p-value",
    "href": "PermutationTest.html#calculate-approximate-p-value",
    "title": "Project 3: Gold and Silver’s Volatility from August to October?",
    "section": "Calculate Approximate p-value",
    "text": "Calculate Approximate p-value\n\n\nCode\np_val &lt;- mean(sim_diffs &gt;= obs_diff)\n\ncat(\"Observed difference in SD:\", round(obs_diff, 5), \"\\n\")\n\n\nObserved difference in SD: 0.00786 \n\n\nCode\ncat(\"Approximate permutation p-value:\", format(p_val, scientific = TRUE, digits = 10), \"\\n\")\n\n\nApproximate permutation p-value: 3.4e-02"
  },
  {
    "objectID": "PermutationTest.html#experiment-setup",
    "href": "PermutationTest.html#experiment-setup",
    "title": "Project 3: Is Silver More Volatile Than Gold (August–October)?",
    "section": "Experiment Setup",
    "text": "Experiment Setup\nWe compare the standard deviations of daily log returns for gold and silver.\n\nNull Hypothesis (H₀): The standard deviation of daily returns is the same for gold and silver.\n[ {} = {} ]\nAlternative Hypothesis (H₁): Silver is more volatile than gold.\n[ {} &gt; {} ]\n\nInstead of relying on a theoretical distribution (like a t-test or F-test), we use a permutation test, which simulates what differences we’d expect purely due to chance under the null hypothesis."
  },
  {
    "objectID": "PermutationTest.html#calculate-one-tailed-p-value",
    "href": "PermutationTest.html#calculate-one-tailed-p-value",
    "title": "Project 3: Is Silver More Volatile Than Gold (August–October)?",
    "section": "Calculate One-Tailed p-value",
    "text": "Calculate One-Tailed p-value\nWe calculate the proportion of permuted SD differences that are greater than or equal to the observed one.\nThis gives a right-tailed p-value for the hypothesis that silver is more volatile than gold.\n\n\nCode\n# One-tailed test: is Silver more volatile than Gold?\np_val &lt;- mean(sim_diffs &gt;= obs_diff)\n\ncat(\"Observed difference in SD (Silver − Gold):\", round(obs_diff, 5), \"\\n\")\n\n\nObserved difference in SD (Silver − Gold): 0.00786 \n\n\nCode\ncat(\"Approximate one-tailed permutation p-value:\",\n    format(p_val, scientific = TRUE, digits = 10), \"\\n\")\n\n\nApproximate one-tailed permutation p-value: 3.4e-02 \n\n\nInterpretation:\nA very small p-value implies that the observed volatility difference is unlikely under the null —\nwe have statistical evidence to reject the null hypothesis and conclude that silver is more volatile."
  },
  {
    "objectID": "PermutationTest.html#final-conclusion",
    "href": "PermutationTest.html#final-conclusion",
    "title": "Project 3: Is Silver More Volatile Than Gold (August–October)?",
    "section": "Final Conclusion",
    "text": "Final Conclusion\nThis simulation-based test supports the claim that silver exhibits greater daily price variability than gold from August to October 2025.\nGiven the industrial use of silver and its smaller market size, this result is consistent with economic intuition: silver’s price tends to react more sharply to both macroeconomic shocks and commodity supply disruptions.\nThe one-tailed permutation test not only confirms this difference but does so without relying on normality assumptions, making it a robust method for comparing volatility in real-world financial data."
  }
]